// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum STATUS {
  TODO
  INPROGRESS
  COMPLETED
}
model Organisation {
  id           Int                @id @default(autoincrement())
  name         String
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  departments  Department[]
  users        UserOrganisation[]
  userRoles    UserRole[]
  invitationId Int?
  invitation   Invitation?
}

model Department {
  id             Int              @id @default(autoincrement())
  name           String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  organisationId Int
  organisation   Organisation     @relation(fields: [organisationId], references: [id])
  users          UserDepartment[]
  messages       Message[]
}

model Task {
  id            Int       @id @default(autoincrement())
  title         String
  description   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deadline      DateTime?
  status     STATUS   @default(TODO)
  createdBy     Int
  createdByUser User      @relation("CreatedBy", fields: [createdBy], references: [id])
  assignedTo    Int?
  assignedUser  User?      @relation("AssignedTo", fields: [assignedTo], references: [id])
}

model OTP {
  id        Int      @id @default(autoincrement())
  code      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model Role {
  id        Int        @id @default(autoincrement())
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  users     UserRole[]
}

model User {
  id               Int       @id @default(autoincrement())
  name             String
  email            String    @unique
  password         String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  createdTasks     Task[]    @relation("CreatedBy")
  assignedTasks    Task[]    @relation("AssignedTo")
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")

  // Relations 
  organisations UserOrganisation[]
  departments   UserDepartment[]
  otps          OTP[]
  roles         UserRole[]
  invitation    Invitation[]
}

model Message {
  id           Int         @id @default(autoincrement())
  content      String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  senderId     Int
  sender       User        @relation("SentMessages", fields: [senderId], references: [id])
  recipientId  Int?
  recipient    User?       @relation("ReceivedMessages", fields: [recipientId], references: [id])
  departmentId Int?
  department   Department? @relation(fields: [departmentId], references: [id])
}

model UserDepartment {
  id           Int        @id @default(autoincrement())
  userId       Int
  user         User       @relation(fields: [userId], references: [id])
  departmentId Int
  department   Department @relation(fields: [departmentId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([userId, departmentId])
}

model UserOrganisation {
  id             Int          @id @default(autoincrement())
  userId         Int
  user           User         @relation(fields: [userId], references: [id])
  organisationId Int
  organisation   Organisation @relation(fields: [organisationId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([userId, organisationId])
}

model UserRole {
  id             Int          @id @default(autoincrement())
  userId         Int
  user           User         @relation(fields: [userId], references: [id])
  roleId         Int
  role           Role         @relation(fields: [roleId], references: [id])
  organisationId Int
  organisation   Organisation @relation(fields: [organisationId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([userId, roleId, organisationId])
}

model Invitation {
  id             Int          @id @default(autoincrement())
  code           String       @unique
  url            String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organisationId Int          @unique
  organisation   Organisation @relation(fields: [organisationId], references: [id])
  userId         Int?
  user           User?        @relation(fields: [userId], references: [id])
}
